<?php

/**
 * This is the model base class for the table "group".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Group".
 *
 * Columns in table "group" available as properties of the model,
 * followed by relations of table "group" available as properties of the model.
 *
 * @property string $id
 * @property string $name
 * @property string $description
 * @property string $root
 * @property string $lft
 * @property string $rgt
 * @property integer $level
 *
 * @property Planet[] $planets
 */
abstract class BaseGroup extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'group';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Group|Groups', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, lft, rgt, level', 'required'),
			array('level', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>50),
			array('description', 'length', 'max'=>200),
			array('root, lft, rgt', 'length', 'max'=>10),
			array('description, root', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, description, root, lft, rgt, level', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'planets' => array(self::MANY_MANY, 'Planet', 'planet_group(group_id, planet_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'planets' => 'PlanetGroup',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'root' => Yii::t('app', 'Root'),
			'lft' => Yii::t('app', 'Lft'),
			'rgt' => Yii::t('app', 'Rgt'),
			'level' => Yii::t('app', 'Level'),
			'planets' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('root', $this->root, true);
		$criteria->compare('lft', $this->lft, true);
		$criteria->compare('rgt', $this->rgt, true);
		$criteria->compare('level', $this->level);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}